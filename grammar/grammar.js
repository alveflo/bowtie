/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,26],$V1=[1,17],$V2=[1,22],$V3=[1,16],$V4=[1,21],$V5=[1,23],$V6=[1,24],$V7=[1,25],$V8=[1,26],$V9=[1,27],$Va=[5,11,14,17,30,31,32,33,38,40,45],$Vb=[5,38],$Vc=[1,30],$Vd=[1,33],$Ve=[5,11,14,17,29,30,31,32,33,38,40,45],$Vf=[2,30],$Vg=[5,11,14,17,29,30,31,32,33,38,40,45,48,54],$Vh=[1,51],$Vi=[8,9,10,11,14,15,17,48],$Vj=[1,57],$Vk=[1,58],$Vl=[1,61],$Vm=[48,54],$Vn=[9,10,11,14,15,17,48];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"PROGRAM":3,"ProgramList":4,"EOF":5,"StatementList":6,"Operator":7,"=":8,"!":9,">":10,"<":11,"UnaryOperator":12,"Constant":13,"STRING":14,"NUMBER":15,"Expression":16,"Identifier":17,"Statement":18,"OneLineTagStatement":19,"BlockTagStatement":20,"ClientScriptBlockPlaceholder":21,"LoopStatement":22,"IfElseStatement":23,"MixinDeclarationStatement":24,"MixinCallStatement":25,"Content":26,"ImportStatement":27,"ExtendStatement":28,"+":29,"VariableIdentifier":30,"EXTENSIONCONTENTBLOCK":31,"IMPORT":32,"EXTEND":33,":":34,"BlockStatement":35,"%":36,"{":37,"}":38,"LoopExpression":39,"FOR":40,"ForLoopNoIterationVariable":41,"ForLoopWithIterationVariable":42,"IfWithoutElseExpression":43,"IfElseExpression":44,"IF":45,"(":46,"IfStatement":47,")":48,"ELSE":49,"IN":50,".":51,"ArgumentList":52,"-":53,",":54,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"=",9:"!",10:">",11:"<",14:"STRING",15:"NUMBER",17:"Identifier",29:"+",30:"VariableIdentifier",31:"EXTENSIONCONTENTBLOCK",32:"IMPORT",33:"EXTEND",34:":",36:"%",37:"{",38:"}",40:"FOR",45:"IF",46:"(",48:")",49:"ELSE",50:"IN",51:".",53:"-",54:","},
productions_: [0,[3,2],[4,1],[7,2],[7,3],[7,2],[7,1],[7,1],[7,2],[7,2],[12,1],[13,1],[13,1],[16,1],[16,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[6,2],[6,0],[26,3],[26,3],[26,1],[26,1],[26,1],[27,2],[28,2],[19,2],[19,3],[19,1],[20,2],[20,2],[21,7],[35,3],[22,1],[39,2],[39,2],[23,1],[23,1],[43,5],[44,7],[47,2],[47,2],[47,0],[41,9],[42,6],[25,5],[25,4],[24,7],[52,3],[52,3],[52,1],[52,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      var content = "";
      if (yy.parentTemplate) {
        content = yy.settings.parsers.contentParser.parseString(yy.parentTemplate.replace("<%=BOWTIE-CONTENT=%>", $$[$0-1][$$[$0-1].length-1]), yy.settings.locals);
      } else {
        content = yy.settings.parsers.contentParser.parseString($$[$0-1][$$[$0-1].length-1], yy.settings.locals);
      }
      return content;
    
break;
case 2: case 11: case 42: case 43:
this.$ = $$[$0]
break;
case 3:
this.$ = "=="
break;
case 4:
this.$ = "==="
break;
case 5:
this.$ = "!="
break;
case 6:
this.$ = ">"
break;
case 7:
this.$ = "<"
break;
case 8:
this.$ = ">="
break;
case 9:
this.$ = "<="
break;
case 10:
this.$ = "!"
break;
case 12:
this.$ = Number(yytext)
break;
case 25:

      this.$ = $$[$0-1].concat($$[$0])
    
break;
case 26: case 50:
 this.$ = [] 
break;
case 27:
 this.$ = $$[$0-2].concat($$[$0].substring(1, $$[$0].length - 1)) 
break;
case 28:
 this.$ = $$[$0-2].concat("#{" + $$[$0] + "}") 
break;
case 29:
 this.$ = [$$[$0].substring(1, $$[$0].length - 1)] 
break;
case 30:
 this.$ = ["#{" + $$[$0] + "}"] 
break;
case 31:
 this.$ = "<%=BOWTIE-CONTENT=%>" 
break;
case 32:
 this.$ = yy.settings.$_compile_bowtie(path.join(path.parse(yy.settings.filename).dir, $$[$0].substring(1, $$[$0].length - 1)), yy.settings) 
break;
case 33:

      yy.parentTemplate = yy.settings.$_compile_bowtie(path.join(path.parse(yy.settings.filename).dir, $$[$0].substring(1, $$[$0].length - 1)), yy.settings)
      this.$ = "";
    
break;
case 34: case 37:
this.$ = $$[$0-1].concat($$[$0])
break;
case 35:
this.$ = yy.settings.parsers.tagParser.parseTag($$[$0-2], $$[$0].join(' '))
break;
case 36:
this.$ = yy.settings.parsers.tagParser.parseTag($$[$0])
break;
case 38:
this.$ = yy.settings.parsers.tagParser.parseTag($$[$0-1], $$[$0])
break;
case 39:
this.$ = $$[$0-6]+$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 40:
this.$ = $$[$0-1].join(' ')
break;
case 46:

      this.$ = yy.settings.parsers.ifParser.parseIfWithoutElse($$[$0-2], $$[$0], yy.settings.locals);
    
break;
case 47:

      this.$ = yy.settings.parsers.ifParser.parseIfElse($$[$0-4],$$[$0-2],$$[$0], yy.settings.locals);
    
break;
case 48: case 49:
 this.$ = $$[$0-1].concat($$[$0]) 
break;
case 51:

      this.$ = yy.settings.parsers.loopParser.loopBasic($$[$0-7],Number($$[$0-5]),Number($$[$0-2]),$$[$0]);
    
break;
case 52:

      this.$ = yy.settings.parsers.loopParser.loopObject($$[$0-4], $$[$0-2], $$[$0], yy.settings.locals);
    
break;
case 53:

      this.$ = yy.settings.parsers.mixinParser.evalMixin($$[$0-4], $$[$0-2], $$[$0]);
    
break;
case 54:

      this.$ = yy.settings.parsers.mixinParser.evalMixin($$[$0-3], $$[$0-1]);
    
break;
case 55:

      this.$ = yy.settings.parsers.mixinParser.newMixin($$[$0-6], $$[$0-2], $$[$0]);
    
break;
case 56: case 57:
 this.$ = $$[$0-2].concat($$[$0]) 
break;
case 58: case 59:
 this.$ = [$$[$0]] 
break;
}
},
table: [o([5,11,14,17,30,31,32,33,40,45],$V0,{3:1,4:2,6:3}),{1:[3]},{5:[1,4]},{5:[2,2],11:$V1,14:$V2,17:$V3,18:5,19:6,20:7,21:8,22:9,23:10,24:11,25:12,26:13,27:14,28:15,30:$V4,31:$V5,32:$V6,33:$V7,39:18,40:$V8,43:19,44:20,45:$V9},{1:[2,1]},o($Va,[2,25]),o($Vb,[2,15],{19:6,20:7,21:8,22:9,23:10,24:11,25:12,26:13,27:14,28:15,39:18,43:19,44:20,18:28,11:$V1,14:$V2,17:$V3,30:$V4,31:$V5,32:$V6,33:$V7,40:$V8,45:$V9}),o($Vb,[2,16],{19:6,20:7,21:8,22:9,23:10,24:11,25:12,26:13,27:14,28:15,39:18,43:19,44:20,18:29,11:$V1,14:$V2,17:$V3,30:$V4,31:$V5,32:$V6,33:$V7,40:$V8,45:$V9}),o($Va,[2,17]),o($Va,[2,18]),o($Va,[2,19]),o($Va,[2,20]),o($Va,[2,21]),o($Va,[2,22],{29:$Vc}),o($Va,[2,23]),o($Va,[2,24]),o($Va,[2,36],{35:32,34:[1,31],37:$Vd}),{36:[1,34]},o($Va,[2,41]),o($Va,[2,44]),o($Va,[2,45]),o($Ve,$Vf,{46:[1,36],53:[1,35]}),o($Vg,[2,29]),o($Vg,[2,31]),{14:[1,37]},{14:[1,38]},{41:39,42:40,46:[1,41]},{46:[1,42]},o($Va,[2,34]),o($Va,[2,37]),{14:[1,43],30:[1,44]},{14:$V2,26:45,30:[1,46],31:$V5},o($Va,[2,38]),o([11,14,17,30,31,32,33,38,40,45],$V0,{6:47}),{8:[1,48]},{10:[1,49]},{14:$V2,26:52,30:$Vh,31:$V5,52:50},o($Va,[2,32]),o($Va,[2,33]),o($Va,[2,42]),o($Va,[2,43]),{30:[1,53]},o($Vi,[2,50],{47:54}),o($Vg,[2,27]),o($Vg,[2,28]),o($Va,[2,35],{29:$Vc}),o($Ve,$Vf),{11:$V1,14:$V2,17:$V3,18:5,19:6,20:7,21:8,22:9,23:10,24:11,25:12,26:13,27:14,28:15,30:$V4,31:$V5,32:$V6,33:$V7,38:[1,55],39:18,40:$V8,43:19,44:20,45:$V9},{13:56,14:$Vj,15:$Vk},{46:[1,59]},{48:[1,60],54:$Vl},o([29,48,54],[2,58]),o($Vm,[2,59],{29:$Vc}),{50:[1,62]},{7:65,8:[1,68],9:[1,69],10:[1,70],11:[1,71],13:67,14:$Vj,15:$Vk,16:64,17:[1,66],48:[1,63]},o([5,11,14,17,30,31,32,33,38,40,45,49],[2,40]),{8:[1,72]},o($Vi,[2,11]),o($Vi,[2,12]),{14:$V2,26:52,30:$Vh,31:$V5,52:73},o($Va,[2,54],{35:74,37:$Vd}),{14:$V2,26:76,30:[1,75],31:$V5},{15:[1,77],30:[1,78]},{35:79,37:$Vd},o($Vi,[2,48]),o($Vi,[2,49]),o($Vi,[2,13]),o($Vi,[2,14]),{8:[1,80]},{8:[1,81]},o($Vn,[2,6],{8:[1,82]}),o($Vn,[2,7],{8:[1,83]}),{36:[1,84]},{48:[1,85],54:$Vl},o($Va,[2,53]),o($Vm,[2,56],{29:$Vf}),o($Vm,[2,57],{29:$Vc}),{51:[1,86]},{48:[1,87]},o($Va,[2,46],{49:[1,88]}),o($Vn,[2,3],{8:[1,89]}),o($Vi,[2,5]),o($Vi,[2,8]),o($Vi,[2,9]),{10:[1,90]},{35:91,37:$Vd},{51:[1,92]},{35:93,37:$Vd},{35:94,37:$Vd},o($Vi,[2,4]),o($Va,[2,39]),o($Va,[2,55]),{15:[1,95]},o($Va,[2,52]),o($Va,[2,47]),{48:[1,96]},{35:97,37:$Vd},o($Va,[2,51])],
defaultActions: {4:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

var path = require('path');
var variableBox = {};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 45;
break;
case 2:return 49;
break;
case 3:return 40;
break;
case 4:return 50;
break;
case 5:return 32;
break;
case 6:return 33;
break;
case 7:return 31;
break;
case 8:return 15;
break;
case 9:return 17;
break;
case 10:return 30;
break;
case 11:return 14;
break;
case 12:return '*';
break;
case 13:return '/';
break;
case 14:return 53;
break;
case 15:return 29;
break;
case 16:return '^';
break;
case 17:return 46;
break;
case 18:return 48;
break;
case 19:return 37;
break;
case 20:return 38;
break;
case 21:return 11;
break;
case 22:return 10;
break;
case 23:return 8;
break;
case 24:return 36;
break;
case 25:return 34;
break;
case 26:return ';';
break;
case 27:return 51;
break;
case 28:return 54;
break;
case 29:return 9;
break;
case 30:return 'PI';
break;
case 31:return 'E';
break;
case 32:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:import\b)/,/^(?:extend\b)/,/^(?:bowtie:content\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[!|a-zA-Z][\w|\.|#|-]*(\([^\)]*\))?)/,/^(?:\$[a-zA-Z][\w|.|\[|\]]*)/,/^(?:"[^\"]*")/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:%)/,/^(?::)/,/^(?:;)/,/^(?:\.)/,/^(?:,)/,/^(?:!)/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}